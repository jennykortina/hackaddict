I"D<p>I&#8217;ve been working on the <a href="http://www.iminlikewithyou.com" title="i'm in like with you.">iminlikewithyou</a> Facebook app over the past few days, and I found myself wasting a lot of time on the <a href="http://developer.facebook.com/documentation.php?v=1.0&amp;doc=fbml" title="Facebook | Incompatible Browser">FBML Documentation Page</a>.  It&#8217;s kind of hard to navigate and there is no concise list of all the tags.</p>
<p>I decided to make a better way to browse the documentation and practice my ruby one liners at the same time.  This is the place I always use as a guide when I need to write a quick ruby one liner: <a href="http://www.fepus.net/ruby1line.txt" title="">http://www.fepus.net/ruby1line.txt</a></p>
<p>First I downloaded the html source for the FBML Documentation page.  After a quick look, I could see that all the FBML tags were enclosed in &lt;h4&gt; tags, so I began by first trying to mimic this grep search:  <pre>grep -noe &#8216;&lt;h4&gt;.*&lt;/h4&gt;&#8217; fbml_doc.html</pre> </p>
<p>This prints something like <br /> <code><pre>164:&lt;h4&gt;fb:action&lt;/h4&gt;  165:&lt;h4&gt;fb:create-button&lt;/h4&gt; 166:&lt;h4&gt;fb:dashboard&lt;/h4&gt;</pre></code> </p>
<p>Here&#8217;s a longwinded version of what I first came up with: <textarea style="width:400px; height=60px;">cat fbml_doc.html | ruby -e &apos;r = STDIN.readlines; r.slice(0,r.size).each_with_index { |l,i| puts &quot;#{i}: #{$1}&quot; if l =~ /(&lt;h4&gt;.*?&lt;\/h4&gt;)/i };&apos; </textarea> </p>
<p><b>cat</b> prints out fbml_doc.html and the <b>|</b> feeds this into ruby.  In the ruby script, I stored the STDIN (standard input) coming through the pipe in a temporary array named <b>r</b> because I thought I might want to take a slice of r if there were other &lt;h4&gt; tags elsewhere in the document.  Luckily there weren&#8217;t, so I was able to do away with that.</p>
<p>Once I had the pieces of text I wanted, I used some string substitutions to format it into an html list of links.  (I noticed that each &lt;h4&gt; was preceded by an anchor, which I could link directly to.)  Here&#8217;s the final script I ended up using:</p>
<textarea style="width:400px; height=60px;">cat fbml_doc.html | ruby -e &apos;target = &quot;target=\&quot;docwin\&quot;&quot;; puts&quot;&lt;ul&gt;&lt;li&gt;&lt;a href=\&quot;README.html\&quot; #{target}&gt;README&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a #{target} href=\&quot;http://developer.facebook.com/documentation.php?v=1.0&amp;doc=fql\&quot;&gt;FQL documentation&lt;/a&gt;&lt;/li&gt;&quot;; STDIN.readlines.each { |l| puts &quot;&lt;li&gt;&lt;a #{target} href=\&quot;http://developer.facebook.com/documentation.php?v=1.0&amp;doc=fbml#&quot; + (n=$1).sub(&quot;:&quot;, &quot;_&quot;) +&quot;\&quot;&gt;#{n}&lt;/a&gt;&lt;/li&gt;&quot; if l =~ /&lt;h4&gt;(.*?)&lt;\/h4&gt;/i }; puts &quot;&lt;/ul&gt;&quot;;&apos; &gt; fbml_tags_list.html </textarea>
<p>This outputs: <pre>&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;README.html&quot; target=&quot;docwin&quot;&gt;README&lt;/a&gt;&lt;/li&gt;<br />&lt;li&gt;&lt;a target=&quot;docwin&quot; href=&quot;http://developer.facebook.com/documentation.php?v=1.0&amp;doc=fql&quot;&gt;FQL documentation&lt;/a&gt;&lt;/li&gt;  <br />&lt;li&gt;&lt;a target=&quot;docwin&quot; href=&quot;http://developer.facebook.com/documentation.php?v=1.0&amp;doc=fbml#fb_action&quot;&gt;fb:action&lt;/a&gt;&lt;/li&gt;  <br />&lt;li&gt;&lt;a target=&quot;docwin&quot; href=&quot;http://developer.facebook.com/documentation.php?v=1.0&amp;doc=fbml#fb_create-button&quot;&gt;fb:create-button&lt;/a&gt;&lt;/li&gt;  <br />&lt;li&gt;&lt;a target=&quot;docwin&quot; href=&quot;http://developer.facebook.com/documentation.php?v=1.0&amp;doc=fbml#fb_dashboard&quot;&gt;fb:dashboard&lt;/a&gt;&lt;/li&gt;  ... </pre> </p>
<p>It clearly grew to a size that was not appropriate for a oneliner, but it was a fun little bit to write in any case.  Notice that I had to use <b>n=$1</b> to save the contents of the magic variable <b>$1</b> that contains the matching portion of each line containing the FBML tag name.  I did this because then I use the <b>sub</b> method to change the <b>:</b> to a <b>-</b> when making a link, the <b>$1</b> variable takes a new value.  I also added some links to the  beginning of the list which made this script quite a bit longer.</p>
<p>Aside: I considered trying to use wget to pipe the Facebook hosted documentation page into the ruby script, but I got an error because Facebook doesn&#8217;t allow the wget browser to access their site.  Here&#8217;s how that would have looked: <pre>wget -q -O - http://developer.facebook.com/documentation.php?v=1.0&amp;doc=fbml | ruby &#8230;</pre></p>
<p>And here&#8217;s a hosted version of the documentation browser I ended up with:</p>
<p><a href="http://kortina.net/facebook-doc-browser/" title="Facebook Documentation Browser | kortina.net">http://kortina.net/facebook-doc-browser/</a></p>
:ET